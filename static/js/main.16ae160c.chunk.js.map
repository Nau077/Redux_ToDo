{"version":3,"sources":["redux_modules/components/todo-input/todo-input.jsx","redux_modules/components/todo-item/todo-item.jsx","redux_modules/components/todo-list/todo-list.jsx","redux_modules/components/footer/footer.jsx","redux_modules/containers/todo/todo.jsx","redux_modules/actions/actionCreator.js","constants.js","redux_modules/components/title/title.jsx","redux_modules/App.js","serviceWorker.js","redux_modules/reducers/filters.js","redux_modules/reducers/tasks.js","redux_modules/store.js","redux_modules/reducers/index.js","index.js"],"names":["ToDoInput","_ref","value","onChange","onKeyPress","onClickInput","react_default","a","createElement","className","onClick","placeholder","defaultProps","ToDoItem","text","isCompleted","removeTask","id","completeTask","ToDoList","tasksList","map","_ref2","todo_item_todo_item","key","FILTERS_BTN","Footer","amount","activeFilter","changeFilter","concat","ToDo","state","taskText","handleInputChange","target","_this","setState","addTask","length","props","Date","getTime","addTaskByClick","filterTasks","tasks","filter","task","getActiveTasksCounter","this","_this$props","filters","isTasksExist","filteredTasks","taskCounter","todo_input_todo_input","todo_list_todo_list","footer_footer","Component","connect","_ref3","type","Title","title","App","react","components_title_title","todo_todo","Boolean","window","location","hostname","match","arguments","undefined","TASKS","load","namespace","preloadedState","Object","toConsumableArray","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","save","ReactDOM","render","es","redux_modules_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16ae160c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './todo-input.css';\r\n\r\nconst ToDoInput = ({ value, onChange, onKeyPress, onClickInput }) => (\r\n  <div className=\"todo-input-wrapper\">\r\n   <span onClick={onClickInput} className=\"fas fa-plus\" >+</span>\r\n    <input\r\n      className=\"todo-input\"\r\n      placeholder=\"Click to add task\"\r\n      onChange={onChange}\r\n      value={value}\r\n      onKeyPress={onKeyPress}\r\n    />\r\n  </div>\r\n);\r\n\r\nToDoInput.propTypes = {\r\n  onChange: PropTypes.func,\r\n  onKeyPress: PropTypes.func,\r\n  value: PropTypes.string,\r\n  onClickInput: PropTypes.func,\r\n\r\n}\r\n\r\nToDoInput.defaultProps = {\r\n  onChange: () => {},\r\n  onKeyPress: () => {},\r\n  value: '',\r\n  onClickInput: () => {},\r\n}\r\n\r\nexport default ToDoInput;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './todo-item.css';\r\n\r\nconst ToDoItem = ({ text, isCompleted, removeTask, id, completeTask }) => (\r\n  <li className=\"todo-item\">\r\n  <span onClick={() => completeTask(id)} className={isCompleted ? 'mark far fa-check-circle' : 'mark far fa-circle'}>+</span>\r\n  <span className={isCompleted ? 'completed text' : 'text'}>{text}</span>\r\n  <span onClick={() => removeTask(id)} className=\"fas fa-times\">X</span>  \r\n</li>\r\n);\r\n\r\nToDoItem.propTypes = {\r\n  text: PropTypes.string,\r\n  isCompleted: PropTypes.bool,\r\n  removeTask: PropTypes.func,\r\n  id: PropTypes.number,\r\n}\r\n\r\nToDoItem.defaultProps = {\r\n  text: '',\r\n  isCompleted: false,\r\n  removeTask: () => {},\r\n  id: 0,\r\n}\r\n\r\nexport default ToDoItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ToDoItem from '../todo-item/todo-item';\r\n\r\nimport './todo-list.css';\r\n\r\nconst ToDoList = ({ tasksList, removeTask, completeTask }) => (\r\n  <ul className=\"todo-list\">\r\n    {tasksList.map(({ id, text, isCompleted }) => (\r\n      <ToDoItem completeTask={completeTask} removeTask={removeTask} id={id} key={id} text={text} isCompleted={isCompleted} />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nToDoList.propTypes = {\r\n  tasksList: PropTypes.array,\r\n  removeTask: PropTypes.func,\r\n  completeTask: PropTypes.func,\r\n}\r\n\r\nToDoList.defaultProps = {\r\n  tasksList: [],\r\n  removeTask: () => {},\r\n  completeTask: () => {},\r\n}\r\n\r\nexport default ToDoList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './footer.css';\r\n\r\nconst FILTERS_BTN = [\r\n  {\r\n    text: 'All',\r\n    id: 'all',\r\n  },\r\n  {\r\n    text: 'Active',\r\n    id: 'active',\r\n  },\r\n  {\r\n    text: 'Completed',\r\n    id: 'completed'\r\n  }\r\n];\r\n\r\nconst Footer = ({ amount, activeFilter, changeFilter }) => ( // добавляем changeFilter (добавляем пропсы в экшн)\r\n  <div className=\"footer\">\r\n    <span className=\"amount\">{`${amount} Tasks left`}</span>\r\n    <div className=\"btn-group\">\r\n      {FILTERS_BTN.map(({ text, id }) => (\r\n        <button\r\n          onClick = {() => {changeFilter(id)}}\r\n          key={id}\r\n          className={id === activeFilter ? \"filter-btn active\" : 'filter-btn'}\r\n        >{text}</button>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nFooter.propTypes = {\r\n  amount: PropTypes.number,\r\n  activeFilter: PropTypes.string,\r\n  changeFilter: PropTypes.func,\r\n}\r\n\r\nFooter.defaultProps = {\r\n  changeFilter: () => {},\r\n  amount: 0,\r\n  activeFilter: 'all',\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {addTask, addTaskByClick, removeTask, completeTask, changeFilter} from '../../actions/actionCreator';\r\nimport ToDoInput from '../../components/todo-input/todo-input';\r\nimport ToDoList from '../../components/todo-list/todo-list';\r\nimport Footer from '../../components/footer/footer';\r\nimport './todo.css';\r\n\r\n\r\nclass ToDo extends Component {\r\n\r\n    state = {\r\n        taskText: '',\r\n    }\r\n\r\n    handleInputChange = ( {target:{value}} ) => {\r\n        this.setState({\r\n            taskText: value,\r\n        })\r\n    }\r\n\r\n    addTask = ({ key }) => {\r\n        const { taskText } = this.state;\r\n    \r\n        if (taskText.length > 3 && key === 'Enter' && taskText.length < 30) { // валидация\r\n          const { addTask } = this.props; // если enter clicked, то из this.props вытягивается addTask (подключенный в connect)\r\n    \r\n          addTask((new Date()).getTime(), taskText, false);\r\n    \r\n          this.setState({\r\n            taskText: '',\r\n          })\r\n    \r\n        }\r\n    \r\n      }\r\n\r\n      addTaskByClick = () => {\r\n        const { taskText } = this.state;\r\n\r\n        if (taskText.length > 3 && taskText.length < 30) { // валидация\r\n            const { addTaskByClick } = this.props; // если has been clicked, то из this.props вытягивается addTask (подключенный в connect)\r\n\r\n            addTaskByClick((new Date()).getTime(), taskText, false); \r\n\r\n            this.setState({\r\n                taskText: '',\r\n              })\r\n        }\r\n      }\r\n\r\n      filterTasks = (tasks, activeFilter) => { // принимает наши задачи и значение активного фильтра\r\n        switch (activeFilter) { // после чего фильтрует задачи по выполненности и возвращает новый масссив\r\n          case 'completed':\r\n            return tasks.filter(task => task.isCompleted); // данный метод применяем в Render\r\n            break;                                         // и пробрасываем туда задачи каждый раз, когда они обновляются в сторе\r\n          case 'active':\r\n            return tasks.filter(task => !task.isCompleted);\r\n            break;\r\n          default:\r\n            return tasks;\r\n        }\r\n      }\r\n    \r\n      getActiveTasksCounter = tasks => tasks.filter(task => !task.isCompleted).length; // считаем количество невыполненных задач\r\n\r\n\r\n    render () {\r\n        const { taskText } = this.state;\r\n        const { tasks, removeTask, completeTask, filters, changeFilter } = this.props;\r\n        const isTasksExist = tasks && tasks.length > 0;\r\n        const filteredTasks = this.filterTasks(tasks, filters);\r\n        const taskCounter = this.getActiveTasksCounter(tasks);\r\n\r\n        return (\r\n            <div className=\"todo-wrapper\">\r\n            <ToDoInput onClickInput={this.addTaskByClick} onKeyPress={this.addTask} onChange={this.handleInputChange} value={taskText}/>\r\n            {isTasksExist && <ToDoList completeTask={completeTask} tasksList={filteredTasks} removeTask={removeTask}/>}\r\n            {isTasksExist && <Footer changeFilter={changeFilter} amount={taskCounter} activeFilter={filters}  />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(({ tasks, filters }) => ({\r\n    tasks,\r\n    filters,\r\n  }), { addTask, removeTask, completeTask, changeFilter, addTaskByClick })(ToDo);\r\n  \r\n  // в данной функции мы пробрасываем редакс-стейт и возвращаем\r\n  // объект tasks (теперь таски доступны в виде пропсов)\r\n\r\n\r\n//  removeTask, completeTask ","\r\nimport { ADD_TASK, ADD_TASK_BY_CLICK, REMOVE_TASK, COMPLETE_TASK,CHANGE_FILTER } from '../../constants';\r\n\r\nexport const addTask = (id, text, isCompleted) => ({\r\n  type: ADD_TASK,\r\n  id,\r\n  text,\r\n  isCompleted\r\n});\r\n\r\nexport const addTaskByClick = (id, text, isCompleted) => ({\r\n    type: ADD_TASK_BY_CLICK,\r\n    id,\r\n    text,\r\n    isCompleted\r\n  });\r\n\r\nexport const removeTask = id => ({\r\n  type: REMOVE_TASK,\r\n  id\r\n});\r\n\r\nexport const completeTask = id => ({\r\n  type: COMPLETE_TASK,\r\n  id\r\n})\r\n\r\nexport const changeFilter = activeFilter => ({\r\n    type: CHANGE_FILTER,\r\n    activeFilter,\r\n  })","export const ADD_TASK = 'ADD_TASK';\r\nexport const ADD_TASK_BY_CLICK = 'ADD_TASK_BY_CLICK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const COMPLETE_TASK = 'COMPLETE_TASK';\r\nexport const CHANGE_FILTER = 'CHANGE_FILTER';","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './title.css';\r\n\r\nconst Title = ({ title }) => (\r\n  <h1 className=\"title\">{title}</h1>\r\n);\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string,\r\n}\r\n\r\nTitle.defaultProps = {\r\n  title: 'Simple title',\r\n}\r\n\r\nexport default Title;","import React, { Fragment } from 'react';\nimport ToDo from './containers/todo/todo'\nimport Title from './components/title/title'\n\nconst App = () => (\n  <Fragment>\n    <Title title=\"LaPoToDo App\"/>\n    <ToDo/>\n  </Fragment>\n)\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_FILTER } from '../../constants';\r\n\r\nconst BASE_FILTER = 'all';\r\n\r\nconst filters = (state = BASE_FILTER, { type, activeFilter }) => {\r\n  switch (type) {\r\n    case CHANGE_FILTER:\r\n      return activeFilter;\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default filters;","import {ADD_TASK, ADD_TASK_BY_CLICK,  REMOVE_TASK, COMPLETE_TASK } from '../../constants'\r\nimport { load } from 'redux-localstorage-simple';\r\n\r\nlet TASKS = load({ namespace: 'todo-list' });\r\n\r\nif (!TASKS || !TASKS.tasks || !TASKS.tasks.length) { // подтягиваем нужный нам nameSpace, проверяем, есть ли в нём таски, передаем в стор\r\n  TASKS = {\r\n    tasks: [],\r\n  }\r\n}\r\n\r\n// const TASKS = [\r\n//     {\r\n//         id: 1,\r\n//         text: 'Walk to the Russian Museem with lapki',\r\n//         isCompleted: false,\r\n//     },\r\n\r\n//     {\r\n//         id: 2,\r\n//         text: 'Walk to the SpaceShip with lapki',\r\n//         isCompleted: false,\r\n//     },\r\n\r\n//     {\r\n//         id: 3,\r\n//         text: 'Pass the first exam',\r\n//         isCompleted: true,\r\n//     }\r\n\r\n// ];\r\n\r\nconst tasks = (state = TASKS.tasks, { id, text, isCompleted, type }) => {\r\n    switch (type) {\r\n      case ADD_TASK :\r\n        return [\r\n          ...state, {\r\n            id,\r\n            text,\r\n            isCompleted,\r\n          }\r\n        ];\r\n\r\n    case ADD_TASK_BY_CLICK :\r\n              return [\r\n                ...state, {\r\n                  id,\r\n                  text,\r\n                  isCompleted,\r\n                }\r\n              ];\r\n      case REMOVE_TASK:\r\n          return [...state].filter(task => task.id !== id);\r\n        case COMPLETE_TASK:\r\n            return [...state].map(task => {\r\n              if(task.id === id) {\r\n                task.isCompleted = !task.isCompleted;\r\n              }\r\n              return task;\r\n            });\r\n      default:\r\n        return state;\r\n    }\r\n}  \r\n\r\n \r\nexport default tasks","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/index';\r\nimport { save } from 'redux-localstorage-simple'\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV !== 'production' &&\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\n/* eslint-enable */\r\n\r\nconst configureStore = preloadedState => (\r\n  createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeEnhancers(\r\n      applyMiddleware(save({ namespace: 'todo-list' })) // middleware выполняет какие-либо промежуточные операции с данными после их появления в redux store\r\n    ),\r\n  )\r\n);\r\n\r\nconst store = configureStore({});\r\n\r\nexport default store;","import { combineReducers } from 'redux';\r\nimport filters from './filters';\r\nimport tasks from './tasks';\r\n\r\nconst rootReducer = combineReducers({ tasks, filters });\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './redux_modules/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux_modules/store';\n\nReactDOM.render((\n    <Provider store={store}>\n        <App />\n    </Provider>\n),document.getElementById('root'));\n \n \nserviceWorker.unregister();\n"],"sourceRoot":""}